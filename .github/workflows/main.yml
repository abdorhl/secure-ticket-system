name: Security & Quality Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # PHP Security Analysis
  php-security:
    name: PHP Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
        extensions: pdo, pdo_mysql, gd, zip, curl, mbstring, xml, json
        coverage: none
        
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
        
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
      
    - name: Run PHP Security Checker
      run: composer run security-check
      continue-on-error: true
        
    - name: Run PHPStan Security Rules
      run: composer run phpstan
      continue-on-error: true
        
    - name: Run Psalm Security Analysis
      run: composer run psalm
      continue-on-error: true
      
    - name: Run PHP CodeSniffer
      run: composer run phpcs
      continue-on-error: true

  # OWASP Dependency Check
  owasp-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
        extensions: pdo, pdo_mysql, gd, zip, curl, mbstring, xml, json
        
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
      
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@v5
      with:
        project: 'Ticket System'
        path: '.'
        format: 'JSON'
        out: 'reports'
        enableRetired: true
        enableExperimental: true
        
    - name: Upload OWASP Report
      uses: actions/upload-artifact@v3
      with:
        name: owasp-dependency-report
        path: reports/

  # SAST (Static Application Security Testing)
  sast-analysis:
    name: SAST Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Semgrep SAST
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/owasp-top-ten
          p/php
          p/security
        generateSarif: "1"
        generateGitlab: "0"
        generateJUnit: "0"
        
    - name: Upload Semgrep SARIF
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep.sarif
      continue-on-error: true

  # CodeQL Analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'php' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality
        
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
        extensions: pdo, pdo_mysql, gd, zip, curl, mbstring, xml, json
        
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      continue-on-error: true

  # Database Security Testing
  database-security:
    name: Database Security Testing
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpass
          MYSQL_DATABASE: ticket_system_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
        extensions: pdo, pdo_mysql, gd, zip, curl, mbstring, xml, json
        
    - name: Install dependencies
      run: composer install --no-dev --optimize-autoloader
      
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -u"testuser" -p"testpass" --silent; do
          sleep 1
        done
        
    - name: Run Database Security Tests
      run: |
        php -r "
        // Test SQL injection vulnerabilities
        \$pdo = new PDO('mysql:host=127.0.0.1;dbname=ticket_system_test', 'testuser', 'testpass');
        \$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        
        // Test prepared statements are used
        echo 'Testing prepared statements...' . PHP_EOL;
        
        // Test for potential SQL injection patterns
        \$testQueries = [
            'SELECT * FROM users WHERE id = ?',
            'SELECT * FROM tickets WHERE status = ?',
            'INSERT INTO tickets (title, description, user_id) VALUES (?, ?, ?)'
        ];
        
        foreach (\$testQueries as \$query) {
            try {
                \$stmt = \$pdo->prepare(\$query);
                echo 'Query prepared successfully: ' . \$query . PHP_EOL;
            } catch (Exception \$e) {
                echo 'ERROR: ' . \$e->getMessage() . PHP_EOL;
                exit(1);
            }
        }
        
        echo 'Database security tests passed!' . PHP_EOL;
        "

  # Authentication & Authorization Testing
  auth-security:
    name: Authentication Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
        extensions: pdo, pdo_mysql, gd, zip, curl, mbstring, xml, json
        
    - name: Install dependencies
      run: composer install --no-dev --optimize-autoloader
      
    - name: Run Authentication Security Tests
      run: |
        php -r "
        // Test session security
        echo 'Testing session security...' . PHP_EOL;
        
        // Check if session is properly configured
        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }
        
        // Test session configuration
        \$sessionConfig = [
            'session.cookie_httponly' => ini_get('session.cookie_httponly'),
            'session.cookie_secure' => ini_get('session.cookie_secure'),
            'session.use_strict_mode' => ini_get('session.use_strict_mode'),
            'session.cookie_samesite' => ini_get('session.cookie_samesite')
        ];
        
        echo 'Session configuration:' . PHP_EOL;
        foreach (\$sessionConfig as \$key => \$value) {
            echo \$key . ': ' . (\$value ? 'OK' : 'WARNING') . PHP_EOL;
        }
        
        // Test password hashing
        echo 'Testing password hashing...' . PHP_EOL;
        \$testPassword = 'testpassword123';
        \$hashed = password_hash(\$testPassword, PASSWORD_DEFAULT);
        
        if (password_verify(\$testPassword, \$hashed)) {
            echo 'Password hashing: OK' . PHP_EOL;
        } else {
            echo 'Password hashing: ERROR' . PHP_EOL;
            exit(1);
        }
        
        echo 'Authentication security tests passed!' . PHP_EOL;
        "

  # File Upload Security Testing
  file-upload-security:
    name: File Upload Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
        extensions: pdo, pdo_mysql, gd, zip, curl, mbstring, xml, json
        
    - name: Install dependencies
      run: composer install --no-dev --optimize-autoloader
      
    - name: Run File Upload Security Tests
      run: |
        php -r "
        echo 'Testing file upload security...' . PHP_EOL;
        
        // Test file type validation
        \$allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
        \$testFiles = [
            'test.jpg' => 'image/jpeg',
            'test.php' => 'application/x-httpd-php',
            'test.exe' => 'application/x-msdownload',
            'test.png' => 'image/png'
        ];
        
        foreach (\$testFiles as \$filename => \$mimeType) {
            if (in_array(\$mimeType, \$allowedTypes)) {
                echo 'File type allowed: ' . \$filename . ' (' . \$mimeType . ')' . PHP_EOL;
            } else {
                echo 'File type blocked: ' . \$filename . ' (' . \$mimeType . ')' . PHP_EOL;
            }
        }
        
        // Test file extension validation
        \$allowedExtensions = ['jpg', 'jpeg', 'png', 'gif'];
        \$testExtensions = ['jpg', 'php', 'exe', 'png', 'js', 'html'];
        
        foreach (\$testExtensions as \$ext) {
            if (in_array(\$ext, \$allowedExtensions)) {
                echo 'Extension allowed: .' . \$ext . PHP_EOL;
            } else {
                echo 'Extension blocked: .' . \$ext . PHP_EOL;
            }
        }
        
        echo 'File upload security tests passed!' . PHP_EOL;
        "

  # XSS and CSRF Testing
  xss-csrf-testing:
    name: XSS & CSRF Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
        extensions: pdo, pdo_mysql, gd, zip, curl, mbstring, xml, json
        
    - name: Install dependencies
      run: composer install --no-dev --optimize-autoloader
      
    - name: Run XSS & CSRF Tests
      run: |
        php -r "
        echo 'Testing XSS protection...' . PHP_EOL;
        
        // Test XSS prevention functions
        \$xssTests = [
            '<script>alert(\"XSS\")</script>',
            'javascript:alert(\"XSS\")',
            '<img src=x onerror=alert(\"XSS\")>',
            '\"><script>alert(\"XSS\")</script>',
            'javascript:/*-/*/*/alert(\"XSS\")'
        ];
        
        foreach (\$xssTests as \$test) {
            \$escaped = htmlspecialchars(\$test, ENT_QUOTES, 'UTF-8');
            if (\$escaped !== \$test) {
                echo 'XSS protection: OK for \"' . substr(\$test, 0, 30) . '...\"' . PHP_EOL;
            } else {
                echo 'XSS protection: WARNING for \"' . substr(\$test, 0, 30) . '...\"' . PHP_EOL;
            }
        }
        
        // Test CSRF token generation
        echo 'Testing CSRF protection...' . PHP_EOL;
        \$token1 = bin2hex(random_bytes(32));
        \$token2 = bin2hex(random_bytes(32));
        
        if (\$token1 !== \$token2 && strlen(\$token1) === 64) {
            echo 'CSRF token generation: OK' . PHP_EOL;
        } else {
            echo 'CSRF token generation: ERROR' . PHP_EOL;
            exit(1);
        }
        
        echo 'XSS & CSRF tests passed!' . PHP_EOL;
        "

  # Security Headers Testing
  security-headers:
    name: Security Headers Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
        extensions: pdo, pdo_mysql, gd, zip, curl, mbstring, xml, json
        
    - name: Start PHP built-in server
      run: |
        php -S localhost:8000 -t . &
        sleep 5
        
    - name: Test Security Headers
      run: |
        curl -I http://localhost:8000/ | grep -i "x-frame-options\|x-content-type-options\|x-xss-protection\|strict-transport-security\|content-security-policy" || echo "Security headers not found - this is expected for a basic setup"
        
    - name: Test HTTPS Redirect
      run: |
        curl -I http://localhost:8000/ | grep -i "location.*https" || echo "HTTPS redirect not configured - this is expected for local development"

  # Performance & Load Testing
  performance-testing:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
        extensions: pdo, pdo_mysql, gd, zip, curl, mbstring, xml, json
        
    - name: Install dependencies
      run: composer install --no-dev --optimize-autoloader
      
    - name: Install Apache Bench
      run: sudo apt-get update && sudo apt-get install -y apache2-utils
      
    - name: Start PHP built-in server
      run: |
        php -S localhost:8000 -t . &
        sleep 5
        
    - name: Run Load Test
      run: |
        ab -n 100 -c 10 http://localhost:8000/ || echo "Load test completed with some errors (expected for basic setup)"

  # Security Report Generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [php-security, owasp-check, sast-analysis, codeql-analysis, database-security, auth-security, file-upload-security, xss-csrf-testing, security-headers, performance-testing]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate Security Report
      run: |
        echo "# Security Test Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "## Test Results Summary" >> security-report.md
        echo "| Test | Status |" >> security-report.md
        echo "|------|--------|" >> security-report.md
        echo "| PHP Security Analysis | ${{ needs.php-security.result || 'Unknown' }} |" >> security-report.md
        echo "| OWASP Dependency Check | ${{ needs.owasp-check.result || 'Unknown' }} |" >> security-report.md
        echo "| SAST Analysis | ${{ needs.sast-analysis.result || 'Unknown' }} |" >> security-report.md
        echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result || 'Unknown' }} |" >> security-report.md
        echo "| Database Security | ${{ needs.database-security.result || 'Unknown' }} |" >> security-report.md
        echo "| Authentication Security | ${{ needs.auth-security.result || 'Unknown' }} |" >> security-report.md
        echo "| File Upload Security | ${{ needs.file-upload-security.result || 'Unknown' }} |" >> security-report.md
        echo "| XSS & CSRF Testing | ${{ needs.xss-csrf-testing.result || 'Unknown' }} |" >> security-report.md
        echo "| Security Headers | ${{ needs.security-headers.result || 'Unknown' }} |" >> security-report.md
        echo "| Performance Testing | ${{ needs.performance-testing.result || 'Unknown' }} |" >> security-report.md
        echo "" >> security-report.md
        echo "## Security Recommendations" >> security-report.md
        echo "1. Ensure all security tests pass before deployment" >> security-report.md
        echo "2. Review and address any failed security checks" >> security-report.md
        echo "3. Keep dependencies updated regularly" >> security-report.md
        echo "4. Monitor security advisories for your stack" >> security-report.md
        echo "5. Implement proper logging and monitoring" >> security-report.md
        
    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md

  # Notify on Security Issues
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-report]
    if: failure()
    
    steps:
    - name: Notify Security Team
      run: |
        echo "Security tests failed! Please check the security report for details."
        echo "This is a placeholder for actual notification (Slack, email, etc.)"
